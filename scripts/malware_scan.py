#!/usr/bin/env python3
"""
Malware scanning integration for Thermal Eye
Provides hooks for ClamAV or other antivirus solutions
"""

import os
import subprocess
import tempfile
from typing import Dict, Any, Optional
from pathlib import Path

class MalwareScanner:
    """Malware scanning service with multiple backend support"""
    
    def __init__(self):
        self.clamav_available = self._check_clamav()
        
    def _check_clamav(self) -> bool:
        """Check if ClamAV is available"""
        try:
            result = subprocess.run(['clamscan', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def scan_file(self, file_path: str) -> Dict[str, Any]:
        """
        Scan a file for malware
        
        Args:
            file_path: Path to file to scan
            
        Returns:
            Dict with scan results: {
                'clean': bool,
                'threat_found': Optional[str],
                'scanner': str,
                'scan_time': float
            }
        """
        import time
        start_time = time.time()
        
        if self.clamav_available:
            return self._scan_with_clamav(file_path, start_time)
        else:
            return self._scan_with_basic_checks(file_path, start_time)
    
    def _scan_with_clamav(self, file_path: str, start_time: float) -> Dict[str, Any]:
        """Scan file using ClamAV"""
        import time
        try:
            result = subprocess.run([
                'clamscan', 
                '--no-summary',
                '--infected',
                file_path
            ], capture_output=True, text=True, timeout=30)
            
            scan_time = time.time() - start_time
            
            if result.returncode == 0:
                return {
                    'clean': True,
                    'threat_found': None,
                    'scanner': 'clamav',
                    'scan_time': scan_time
                }
            elif result.returncode == 1:
                threat = result.stdout.strip().split(':')[-1].strip() if result.stdout else 'Unknown threat'
                return {
                    'clean': False,
                    'threat_found': threat,
                    'scanner': 'clamav',
                    'scan_time': scan_time
                }
            else:
                raise Exception(f"ClamAV scan failed: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            import time
            return {
                'clean': False,
                'threat_found': 'Scan timeout',
                'scanner': 'clamav',
                'scan_time': time.time() - start_time
            }
        except Exception as e:
            print(f"ClamAV scan error: {e}")
            return self._scan_with_basic_checks(file_path, start_time)
    
    def _scan_with_basic_checks(self, file_path: str, start_time: float) -> Dict[str, Any]:
        """Basic file validation when antivirus is not available"""
        import time
        
        try:
            file_size = os.path.getsize(file_path)
            
            if file_size > 100 * 1024 * 1024:  # 100MB limit
                return {
                    'clean': False,
                    'threat_found': 'File too large',
                    'scanner': 'basic',
                    'scan_time': time.time() - start_time
                }
            
            # Check file extension
            allowed_extensions = {'.jpg', '.jpeg', '.png', '.tiff', '.tif', '.bmp'}
            file_ext = Path(file_path).suffix.lower()
            
            if file_ext not in allowed_extensions:
                return {
                    'clean': False,
                    'threat_found': f'Disallowed file type: {file_ext}',
                    'scanner': 'basic',
                    'scan_time': time.time() - start_time
                }
            
            with open(file_path, 'rb') as f:
                header = f.read(1024)
                
            suspicious_patterns = [
                b'<script',
                b'javascript:',
                b'vbscript:',
                b'<?php',
                b'<%',
                b'#!/bin/',
                b'powershell'
            ]
            
            for pattern in suspicious_patterns:
                if pattern in header.lower():
                    return {
                        'clean': False,
                        'threat_found': f'Suspicious content pattern: {pattern.decode("utf-8", errors="ignore")}',
                        'scanner': 'basic',
                        'scan_time': time.time() - start_time
                    }
            
            return {
                'clean': True,
                'threat_found': None,
                'scanner': 'basic',
                'scan_time': time.time() - start_time
            }
            
        except Exception as e:
            return {
                'clean': False,
                'threat_found': f'Scan error: {str(e)}',
                'scanner': 'basic',
                'scan_time': time.time() - start_time
            }

scanner = MalwareScanner()

def scan_uploaded_file(file_path: str) -> Dict[str, Any]:
    """
    Convenience function to scan an uploaded file
    
    Args:
        file_path: Path to uploaded file
        
    Returns:
        Scan results dictionary
    """
    return scanner.scan_file(file_path)

def is_file_safe(file_path: str) -> bool:
    """
    Quick check if file is safe
    
    Args:
        file_path: Path to file
        
    Returns:
        True if file is clean, False otherwise
    """
    result = scan_uploaded_file(file_path)
    return result['clean']

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) != 2:
        print("Usage: python malware_scan.py <file_path>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        sys.exit(1)
    
    result = scan_uploaded_file(file_path)
    
    print(f"Scanner: {result['scanner']}")
    print(f"Scan time: {result['scan_time']:.2f}s")
    
    if result['clean']:
        print("✅ File is clean")
        sys.exit(0)
    else:
        print(f"❌ Threat found: {result['threat_found']}")
        sys.exit(1)
